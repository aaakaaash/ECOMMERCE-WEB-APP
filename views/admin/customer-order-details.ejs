



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .order-status {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }
        .coin-icon {
            color: gold;
            margin-right: 5px;
        }
        .product-card {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
            background-color: white;
        }
        .order-details-container {
            display: flex;
            justify-content: space-between;
            margin-bottom: 30px;
        }
        .order-details-section {
            flex: 1;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 8px;
            background-color: white;
        }
       
        .dummy{
            width: 100%;
            height: 100px;
        }
     
    </style>
</head>
<%- include("../../views/partials/admin/header") %>
<body>
    
    <div class="container">
        <div class="row">
    <div class="dummy">
        <br><br>
        <h2>Order Details</h2>
    </div>
    <div class="container1" style="padding: 20px;">
        
      
        <div class="row order-details-container">

            <div class="col-md-3 col-sm-6 order-details-section">
                <h5>Order Information</h5>
                <p><strong>Order ID:</strong> <%= order.orderId %></p>
                <p><strong>Order Date:</strong><%= order.date%></</p>
                <p><strong>Order Status:</strong> <%= order.status %></p>
            </div>

            <div class="col-md-3 col-sm-6 order-details-section">
                <h5>Delivery Address</h5>
                <p><%= order.address.house %>, <%= order.address.place %></p>
                <p><%= order.address.city %>, <%= order.address.state %> - <%= order.address.pin %></p>
                <p><strong>Contact:</strong> +91 <%= order.address.contactNo %></p>
            </div>
        
            <div class="col-md-3 col-sm-6 order-details-section">
                <h5>Payment Information</h5>
                <p><strong>Payment Method:</strong> <%= order.payment.length > 0 ? order.payment[0].method : 'N/A' %></p>
                <p><strong>Payment Status:</strong> <%= order.payment.length > 0 ? order.payment[0].status : 'N/A' %></p>
            
                <p><strong>Total Amount:</strong> ₹<%= order.totalPrice %></p>
            </div>
            
            <div class="col-md-3 col-sm-6 order-details-section">
                <h5>Order Summary</h5>
                
                <p><strong>Subtotal:</strong> ₹<%= order.actualPrice %></p>
                <p><strong>Discount:</strong> ₹<%= order.discount %></p>
                <p><strong>Total:</strong> ₹<%= order.totalPrice %></p>
            </div>
        </div>

        <h4>Ordered Products</h4>
        
        
        <% order.items.forEach(item => { %>
            <div class="product-card">
                <div class="row">
                    <div class="col-md-2">
                        <img src="/uploads/product-images/<%= item.product.productImage[0] %>" 
                             alt="<%= item.product.productName %>" 
                             class="img-fluid"
                             onerror="this.src='/images/placeholder-image.jpg'; this.onerror=null;">
                    </div>
                    <div class="col-md-6">
                        <h5><%= item.product.productName %></h5>
                        <p>Color: <%= item.product.color %> | SKU: <%= item.product.skuNumber %></p>

                        <p>Quantity: <%= item.quantity %></p>
                        <p>Actual Price: ₹<%= item.regularPrice * item.quantity %></p>
                        <p>Discount: ₹<%= ((item.regularPrice - item.saledPrice) * item.quantity).toString() %></p>
                        <p>Saled Price: ₹<%= item.saledPrice * item.quantity %></p>
                        
                    </div>
                    <div class="col-md-4">
                        <div class="order-status">
                            <p class="text"><%= item.itemOrderStatus %></p>
                            <button class="btn btn-info" onclick="return updateItemStatus('<%= order._id %>', '<%= item.itemOrderId %>')">Update Status</button>
                        </div>
                    </div>
                </div>
            </div>
        <% }); %>
        
    </div>
    </div>
</div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <%- include("../../views/partials/admin/footer") %>
</body>
</html>

<script>
function updateItemStatus(orderId, itemId) {
    const statusElement = document.querySelector(`button[onclick="return updateItemStatus('${orderId}', '${itemId}')"]`).previousElementSibling;
    const currentStatus = statusElement.innerText;

    let inputOptions = {
        'Pending': 'Pending',
        'Processing': 'Processing',
        'Shipped': 'Shipped',
        'Delivered': 'Delivered',
        'Cancelled': 'Cancelled',
        'Return Requested': 'Return Requested',
        'Return Approved': 'Return Approved',
        'Return Rejected': 'Return Rejected',
        'Returned': 'Returned'
    };

    if (currentStatus === 'Delivered') {
        delete inputOptions.Pending;
        delete inputOptions.Processing;
        delete inputOptions.Shipped;
        delete inputOptions.Cancelled;
    } else if (currentStatus === 'Cancelled' || currentStatus === 'Returned') {
        Swal.fire({
            title: 'Error!',
            text: 'This item status cannot be changed.',
            icon: 'error'
        });
        return;
    } else if (currentStatus === 'Return Requested') {
        inputOptions = {
            'Return Approved': 'Return Approved',
            'Return Rejected': 'Return Rejected',
            'Returned': 'Returned'
        };
    }

    Swal.fire({
        title: 'Update Item Status',
        input: 'select',
        inputOptions: inputOptions,
        showCancelButton: true,
        confirmButtonText: 'Update',
        showLoaderOnConfirm: true,
        preConfirm: (status) => {
            let data = { status: status, itemId: itemId };

            if (status === 'Cancelled') {
                return Swal.fire({
                    title: 'Cancellation Reason',
                    input: 'text',
                    inputPlaceholder: 'Enter cancellation reason',
                    showCancelButton: true,
                    inputValidator: (value) => {
                        if (!value) return 'You need to provide a reason for cancellation!';
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        data.cancelReason = result.value;
                        return fetch(`/admin/updateOrderItemStatus/${orderId}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(data)
                        });
                    }
                });
            } else if (status === 'Return Requested') {
                return Swal.fire({
                    title: 'Return Reason',
                    input: 'text',
                    inputPlaceholder: 'Enter return reason',
                    showCancelButton: true,
                    inputValidator: (value) => {
                        if (!value) return 'You need to provide a reason for return!';
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        data.returnReason = result.value;
                        return fetch(`/admin/updateOrderItemStatus/${orderId}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(data)
                        });
                    }
                });
            } else {
                return fetch(`/admin/updateOrderItemStatus/${orderId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });
            }
        },
        allowOutsideClick: () => !Swal.isLoading()
    }).then((result) => {
        if (result.isConfirmed) {
            result.value.json().then(data => {
                if (data.success) {
                    Swal.fire({
                        title: 'Success!',
                        text: 'Item status has been updated.',
                        icon: 'success'
                    }).then(() => {
                        location.reload();
                    });
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: data.message || 'Failed to update item status',
                        icon: 'error'
                    });
                }
            }).catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    title: 'Error!',
                    text: 'An error occurred while updating the item status',
                    icon: 'error'
                });
            });
        }
    });
}

</script>